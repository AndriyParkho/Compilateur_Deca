// Description:
//  Réalisation d'une liste chaînée d'entier en deca
//
// Resultats:
//
// Historique:
//    cree le 23/01/2021

class ListChaine{
	int valeur;
	ListChaine suivant;

	void setVal(int val){
		this.valeur = val;
	}
	
	void setNext(ListChaine next){
		this.suivant = next;
	}
	
	int getVal(){
		return valeur; 
	}
	
	ListChaine getNext(){
		return suivant;
	}

	// Lancer la fonction sur la tête de liste
	void insertQueue(int newVal){
		ListChaine currentCell;
		ListChaine newQueue = new ListChaine();
		newQueue.setVal(newVal);
		currentCell = this;
		while(currentCell.suivant != null){
			currentCell = currentCell.suivant;
		}
		currentCell.setNext(newQueue);
	}

	// Lancer la fonction sur la tête de liste
    ListChaine goTo(int index){
        int i = 1;
        ListChaine currentCell = this;
        while (currentCell.suivant != null && i < index){
            currentCell = currentCell.suivant;
            i = i + 1;
        }
        if (i != index){
            println("Indice trop grand");
            return this;
        }
        return currentCell;
    }

    // Lancer la fonction sur la tête de liste
    int getTaille(){
        ListChaine currentCell = this;
        int taille = 1;
        while (currentCell.suivant != null){
            taille = taille + 1;
            currentCell = currentCell.suivant;
        }
        return taille;
    }
	
	// Lancer la fonction sur la tête de liste
	void createListOpti(int tailleList){
		int i;
		ListChaine currentCell = this;
		ListChaine newCell;
		i = 1;
		while(i < tailleList){
			newCell = new ListChaine();
			newCell.setVal(i);
			currentCell.setNext(newCell);
			currentCell = newCell;
			i = i + 1;
		}
	}
	
	// Lancer la fonction sur la tête de liste
	void createList(int tailleList){
		int i;
		ListChaine newCell;
		i = 1;
		while(i < tailleList){
			this.insertQueue(i);
			i = i + 1;
		}
	}
	
	void parcoursList(int tailleList){
		int i = 0;
		ListChaine currentCell = this;
		while(i < tailleList){
			currentCell = currentCell.getNext();
			i = i + 1;
		}
	}
	
	void doubleParcoursList(int tailleList){
		int i = 0;
		int j;
		ListChaine currentCell;
		while(i < tailleList){
			j = 0;
			currentCell = this;
			while(j < tailleList){
				currentCell = currentCell.getNext();
				j = j + 1;
			}
			i = i + 1;
		}
	}
	// Lancer la fonction sur la tête de liste
	void tri(){
	    int min;
	    int index1 = 1;
	    int index2;
	    int taille = this.getTaille();
	    int buffer;
	    ListChaine Cell1;
	    ListChaine Cell2;
	    while (index1 <= taille){
	        min = index1;
	        index2 = index1;
	        while (index2 <= taille){
	            if (this.goTo(index2).valeur < this.goTo(min).valeur){
	                min = index2;
	            }
	            index2 = index2 + 1;
	        }
            if (min != index1){
                Cell1 = this.goTo(index1);
                Cell2 = this.goTo(min);
                buffer = Cell1.valeur;
                Cell1.valeur = Cell2.valeur;
                Cell2.valeur = buffer;
            }
            index1 = index1 + 1;
	    }
	}

	// Lancer la fonction sur la tête de liste
	void affiche(){
	    ListChaine currentCell = this;
	    print("[", currentCell.getVal(), "]");
	    while (currentCell.getNext() != null){
	        print(" -> ");
	        currentCell = currentCell.getNext();
	        print("[", currentCell.getVal(), "]");
	    }
	    println();
	}

}